
//Tell the DB to create the tables in the db (neon postgres) based on the schemas defined below : bunx prisma migrate dev
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defines the schema for the User
model User {
  id              String              @id    @default(uuid())
  username        String
  profilePicture  String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

// Defines the schema for a Training Model
model Model {
  id              String              @id     @default(uuid())     
  name            String
  type            ModelType
  age             Int
  ethinicity      EthinicityType
  eyeColor        EyeColorType
  bald            Boolean   
  userId          String
  triggerWord     String?
  tensorPath      String?
  status          ModelStatus         @default(Pending)
  outputImages    OutputImages[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  falAiReqId      String?             @unique         //Here we have to create a unique index on the falAiReqId, because we are using the webhook approach
                                                      // And we are querying the Model table basis this ID
  zipUrl          String?
  @@index([falAiReqId])
}

// Defines the schema for a Output Images generated by the model
model OutputImages {
  id              String              @id     @default(uuid())
  imageUrl        String              @default("")
  modelId         String
  userId          String
  prompt          String
  falAiReqId      String?             @unique         //Here we have to create a unique index on the falAiReqId, because we are using the webhook approach
                                                      // And we are querying the Model table basis this ID  
  status          OutputImgStatus     @default(Pending)
  model           Model               @relation(fields: [modelId], references: [id])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([falAiReqId])
}

// Defines the schema for a Pack of Prompts
model Packs {
  id              String              @id     @default(uuid())
  name            String
  packPrompts     PackPrompts[]
}

// Defines the schema for a Prompt in a Pack
model PackPrompts {
  id              String              @id     @default(uuid())
  prompt          String
  packId          String
  pack            Packs               @relation(fields: [packId], references: [id])
}

//ENUMS
enum ModelType { 
  Man
  Woman
  Others
}

enum EthinicityType {
  Black 
  Asian_American    @map("Asian American")
  White
  East_Asian        @map("East Asian")
  South_East_Asian  @map("South East Asian")
  South_Asian       @map("South Asian")
  Middle_Eastern    @map("Middle Eastern")
  Pacific
  Hispanic
}

enum EyeColorType {
  Brown
  Blue
  Hazel
  Gray
}

enum ModelStatus {
  Pending
  Completed
  Failed
}

enum OutputImgStatus {
  Pending
  Generated
  Failed
}